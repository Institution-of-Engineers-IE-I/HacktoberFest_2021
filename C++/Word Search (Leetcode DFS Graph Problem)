// Word Search Problem (Depth First Search)
// Link: https://leetcode.com/problems/word-search/
// Mayank Jain

// Graph DFS
class Solution {
public:
    int arr[4][2] = {{0,-1},{0,1},{-1,0},{1,0}};
    bool dfs(vector<vector<char>>&board,vector<vector<bool>>&visited,int x,int y,string word,int idx){
        visited[x][y] = true;
        if(idx==word.size()-1) return true;
        for(int i=0;i<4;i++){
            int kk = x+arr[i][0]; int ll = y+arr[i][1];
            if(kk>=0 && kk<board.size() && ll>=0 && ll<board[0].size() && visited[kk][ll]==false && board[kk][ll]==word[idx+1]){
                bool res = dfs(board,visited,kk,ll,word,idx+1);
                if(res==true) return true;
            }
        }
        visited[x][y] = false;
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size(),n = board[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(visited[i][j]==false && board[i][j]==word[0]){
                    bool res = dfs(board,visited,i,j,word,0);
                    if(res==true) return true;
                }
            }
        }
        return false;
    }
};
