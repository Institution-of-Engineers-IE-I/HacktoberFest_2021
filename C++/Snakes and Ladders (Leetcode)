// Leetcode Snakes and Ladders Problem
// Link: https://leetcode.com/problems/snakes-and-ladders/
// Mayank Jain

class Solution {
public:
    
    //Shortest Path Graph Algorithm (Minimum Moves)
    //Breadth First Search
    
    int bfs(vector<vector<int>> graph,int src,int dest){
        vector<bool> visited(dest+1,false);
        queue<int> q; q.push(src); visited[src] = true;
        vector<int> dist(dest+1,0);
        while(q.size()>0){
            int val = q.front(); q.pop();
            for(auto itr:graph[val]){
                if(visited[itr]==false){
                    visited[itr] = true;
                    dist[itr] = dist[val] + 1;
                    q.push(itr);
                }
            }
        }
        return dist[dest];
    }
    
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<int> addition(n*n+1,0); int idx = 0,check = 0;
        for(int i=n-1;i>=0;i--){
            if(check%2==0){
                for(int j=0;j<n;j++){
                    idx++;
                    if(board[i][j]!=-1){
                        addition[idx] = board[i][j] - idx;
                    }
                }
            }
            else{
                for(int j=n-1;j>=0;j--){
                    idx++;
                    if(board[i][j]!=-1){
                        addition[idx] = board[i][j] - idx;
                    }
                }
            }
            check++;
        }
        vector<vector<int>> graph(n*n + 1);
        for(int i=1;i<n*n;i++){
            for(int move=1;move<=6;move++){
                int temp = move + i;
                if(temp<=n*n){
                    graph[i].push_back(addition[temp]+temp);
                }
            }
        }
        int ans = bfs(graph,1,n*n); 
        if(ans==0) return -1; 
        return ans;
    }
};
